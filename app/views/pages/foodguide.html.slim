p
H3 Zo maak je Food voor jouw RailsPet
p
p Bij het Pet model hebben we Rails heel hard voor ons laten werken, heel auto-magisch, maar nu gaan we wat meer dingen zelf doen. We gaan Food maken voor onze Pet. Omdat het Food dat we aanmaken steeds maar bij een huisdier hoort, maken we een nested resource. 
p Een Pet heeft heel veel Food, maar Food hoort maar bij een Pet. Food heeft een naam, aantal calorieÃ«n en een referentienummer bij welk Pet het hoort.

p Tik in de console:
.code-container
  code $ rails g model Food name:string calories:integer pet:references
p
p en volg met 
.code-container
  code $ rake db:migrate
p
t We willen dat Food echt bij Pet hoort. Als je het mapje app > models > food.rb opent zie je de code 
code  "belongs_to :pet"
t . Als we nu pet.rb openen, zien we echter nog geen omschrijven. Plak daarom tussen de regels 
code "class Pet < ActiveRecord::Base"
t  en 
code "validates :name, presence: true, on: :create"
t  de regel
p
.code-container
  code
    p has_many :foods
p
p Ga nu naar de map railspet > config > routes.rb en haal alle regels met een # erin weg.
p pas nu het bestand aan zodat het er zo uit komt te zien:
#routes
p
p
t Ga een mapje omhoog, het controllers mapje. Hierin zie je het bestand 
code pets_controller.rb
p
p Hierin staan alle acties die we met een Pet mogen doen. Index > alle Pets bekijken, Show > een bepaalde Pet bekijken, New > een nieuw leeg veldje maken in de database, Create > Aanmaken van een nieuwe Pet, Edit > Een Pet klaarzetten om aan te passen, Update > De informatie van een Pet wijzigen, Destroy > een Pet verwijderen uit de database. 
p Toen we bij het aanmaken van het Pet-model scaffolding kozen, heeft Rails deze informatie voor ons gemaakt. Omdat we nu een model bouwen dat iets ingewikkelder in elkaar zit en bij een ander model hoort gaan we de controller zelf bouwen. 
p
t Ga op "controllers" met je rechtermuisknop en kies "New File" vul hier de naam 
code foods_controller.rb
t  in. Let op dat je bij controllers de meervouds-vorm (foods met een -s) gebruikt.
p Voer de volgende tekste in dit bestand de volgende code, zorg dat je deze net zo vormgeeft als de pets_controller.rb
#foodcontroller
p
p We gaan weer terug naar het bestand railspet > app > models > pet.rb. We willen van onze Pet nog wat extra informatie hebben. We willen weten hoe oud de Pet is, welk eten er allemaal gegeten is en ook hoe vol onze Pet zit. Daarom gaan we wat methodes toevoegen in dit bestand. Als we de age willen weten hoeven we eigenlijk alleen maar te weten wanneer de Pet is aangemaakt, welke dag het vandaag is en hoeveel dagen er tussen die twee data zit. 
p Pas pet.rb aan zodat het er zo uitziet:
#age
p
p We gaan nu nog twee methodes toevoegen. Om te zien hoeveel een Pet heeft gegeten en hoe vol de pet eigenlijk is. Zorg dat pet.rb er nu zo uitziet:
p
#methods
p
p We moeten nog een paar dingen aanpassen, de achterliggende code hebben we nu in orde, maar het uiterlijk van Foods hebben we nog niet aangepakt. Ga hiervoor naar railspet > app > views en maak een nieuwe folder aan. Klik met de rechtermuisknop op views en kies "New Folder". Deze noem je foods. In de foods-map maak je eerst een bestand aan dat index.html.erb heet. In het Index bestand zie je alle Foods die zijn aangemaakt.
p Zorg dat index.html.erb er zo uitziet:
#index
p
p Het volgende bestand dat we in de foods view-map gaan aanmaken heet 'show.html.erb'. Met Show kun je 1-bepaalde Food zien. Zorg dat show.html.erb er zo uitziet:
#show
p
p Wat we ook nodig hebben is een bestand om een nieuw Food aan te maken. We noemen dit new.html.erb en het ziet er zo uit:
#new
p
p Je ziet dat new.html.erb verwijst naar een 'form' een formulier. Dat gaan we nu aanmaken. Omdat form niet een opzichzelfstaande pagina wordt in onze applicatie, maar alleen te zien is in de New-pagina noemen we dit een partial. De naam van een partial begint altijd met een liggend steepje. Noem dit nieuwe bestand _form.html.erb
#form
p
p Omdat de View-bestanden voor Pet automatisch zijn aangemaakt door Rails, voordat het systeem wist dat wij ook Foods gingen aanmaken, moeten we nu nog wat dingetjes aanpassen, om te voorkomen dat onze applicatie breekt.
p
p Open het bestand index.html.erb. Pas deze aan zodat het op het bestand hieronder lijkt, let goed op de verschillen.
#petindex
p
p We doen hetzelfde met show.html.erb, pas deze aan zodat het lijkt op het bestand hieronder.
#petshow
p
p Je hebt nu alles gedaan om Food onder te brengen bij een Pet. In de console kun je met
.code-container
  code $ rails server
p de Rails server weer aanzetten.
p 
p Klik bovenin Nitrous op Preview en kies "Port 3000".
p Nitrous gaat nu naar jouw applicatie. Maak maar wat huisdieren aan, laat ze eten eten en uitpoepen en bekijk hoe vol jouw huisdieren zitten.
p
#pinkberry
p
p Veel plezier met jouw zelfgebouwde applicatie!
